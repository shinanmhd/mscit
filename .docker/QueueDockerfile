FROM php:8.2-fpm

# Set apt sources
RUN echo "deb https://deb.debian.org/debian bullseye main\ndeb https://deb.debian.org/debian-security bullseye-security main\ndeb https://deb.debian.org/debian bullseye-updates main\n" > /etc/apt/sources.list

# Installing and Updating Packages
RUN apt-get update && apt-get install -y \
    curl \
    libonig-dev \
    libxml2-dev \
    git \
    zip \
    unzip \
    libzip-dev \
    libpq-dev \
    libicu-dev \
    postgresql-client \
    libpng-dev \
    && docker-php-ext-install zip \
    && docker-php-ext-configure intl \
    && docker-php-ext-install intl exif \
    && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

#RUN docker-php-ext-install pdo_pgsql gd mysqli
RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd intl soap
RUN docker-php-ext-configure intl

#####################################
# DEBUG
#####################################

ARG DEBUG=true
RUN if [ ${DEBUG} = true ]; then \
    # Install the xdebug extension
    pecl install xdebug && \
    docker-php-ext-enable xdebug \
;fi

# RUN if [ ${DEBUG} = true ]; then \
#     ip -4 route list match 0/0 | awk '{print $3 " host.docker.internal"}' >> /etc/hosts \
# ;fi

RUN if [ ${DEBUG} = true ]; then \
    cp /usr/local/etc/php/php.ini-development /usr/local/etc/php/php.ini \
;fi

RUN if [ ${DEBUG} != true ]; then \
    cp /usr/local/etc/php/php.ini-production /usr/local/etc/php/php.ini \
;fi

RUN if [ ${DEBUG} = true ]; then \
    echo '\n\
[XDebug]\n\
xdebug.mode = debug\n\
xdebug.start_with_request = yes\n\
xdebug.discover_client_host = false\n\
xdebug.client_host = host.docker.internal\n\
xdebug.idekey = XDEBUG\n\
xdebug.client_port = 9003\n'\
    >> /usr/local/etc/php/php.ini \
;fi

# Setting Working Directory
WORKDIR /app

# Copy existing application directory contents
COPY src /app

# User Permission Stuff
# RUN usermod -u 1000 www-data
# RUN groupmod -g 1000 www-data

# Copy existing application directory permissions
# RUN chown -R www-data:www-data /app

# Install node and npm
#ENV NODE_VER=20.5.0
#RUN apt install -y tar xz-utils curl
#RUN bash -c 'export SYS_ARCH=$([ "$(uname -m)" = "aarch64" ] && echo "arm64" || [ "$(uname -m)" = "x86_64" ] && echo "x64");curl -L "https://nodejs.org/dist/v${NODE_VER}/node-v${NODE_VER}-linux-${SYS_ARCH}.tar.xz" | tar -C /opt -xJf -'
#RUN ln -s /opt/node-v${NODE_VER}-linux-x64/bin/node /bin/node
#RUN ln -s /opt/node-v${NODE_VER}-linux-x64/bin/npm /bin/npm
#RUN ln -s /opt/node-v${NODE_VER}-linux-x64/bin/npx /bin/npx

RUN curl -sL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs
RUN npm install -g npm@10.8.2
#RUN chown -R 1000:1000 /var/www/.npm

# Reset composer state
RUN rm -f composer.lock
RUN rm -rf vendor

COPY .docker/php/entrypoint.sh /entrypoint.sh

RUN chmod +x /entrypoint.sh

# Set www-data as default user
#USER www-data

# Running Composer Install
RUN composer install --no-scripts || true

CMD php artisan reverb:install || true
CMD php artisan install:broadcasting || true

# Expose port 9000 and start php-fpm server
# EXPOSE 9000

# ENTRYPOINT ["entrypoint.sh"]

CMD php artisan queue:listen
